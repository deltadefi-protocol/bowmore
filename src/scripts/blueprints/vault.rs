use whisky::{
    utils::blueprint::{SpendingBlueprint, WithdrawalBlueprint},
    BuilderDataType, LanguageVersion,
};

use crate::{config::AppConfig, scripts::blueprints::vault_oracle::vault_oracle_mint_blueprint};

pub fn vault_spend_blueprint() -> SpendingBlueprint {
    let AppConfig { network_id, .. } = AppConfig::new();
    let oracle_nft = vault_oracle_mint_blueprint().hash;

    let mut blueprint =
        SpendingBlueprint::new(LanguageVersion::V3, network_id.parse().unwrap(), None);
    blueprint
    .param_script(
        "5904be010100229800aba2aba1aba0aab9faab9eaab9dab9a9bae0024888888896600330013004375401322323300100100322330030013002002918041804800cdc3a4001370e90014dd2a400091111119194c004c02cdd5000c88c9660026010601c6ea8006264b30013009300f3754003132323232323232323232323298009bae301f0019bae301f00c9bae301f00b9bad301f0099bad301f0089bad301f0079bae301f0069bad301f0059bae301f0049bae301f0039bae301f0024888888888896600260560191330223758605402a44b3001002880d44c8c008c0b800cdd7181600120548b2050180f800980f000980e800980e000980d800980d000980c800980c000980b800980b000980a80098081baa0018b201c3232598009805000c5a2b300130090018b44c050c044dd5001201e403c601e6ea8004c048c04cc04cc03cdd5180498079baa3012300f3754003164034646600200200644b30010018a6103d87a80008992cc004c024c966002601460226ea80062900044dd6980a98091baa001404064b3001300a3011375400314c103d87a8000899198008009bab30163013375400444b30010018a6103d87a8000899192cc004cdc8a45000018acc004cdc7a44100001898069980c180b00125eb82298103d87a80004051133004004301a00340506eb8c050004c05c005015202032330010013756601860246ea8c030c048dd5001112cc004006298103d87a8000899192cc004cdc8804000c56600266e3c020006260186602e602a00497ae08a60103d87a8000404d1330040043019003404c6eb8c04c004c05800501444c020cc04c0052f5c11330030033015002403c6026002808a601e011300f002488896600260100091329800980a000cc050c05400660206ea800a2646644b3001300d3013375400b13232598009807980a9baa00189919912cc004c0480062b3001301937540070028b20348acc004c04400626464646644b3001302200389980c9bac3021005225980080144cc06c010896600200500b899180118138019bae3025002408d13230023025003375a6046004810a2c80f8dd6180f8009bae301f002301f001301e0013019375400716405c80b8566002601e602c6ea800629462941015180b1baa00130193016375400316405064660020026eacc064c068c068c068010896600200314c0103d87a80008992cc004cdd7802180b800c4c03ccc068c0600052f5c1133003003301c0024058603400280c0c02ccc058c05cc060c060c060c060c060c060c060c060c0600052f5c113232330010013756603200844b30010018a508acc004cdd7801980b180d000c528c4cc008008c06c00501520303374a90011980b180b800a5eb81012180b180b180b180b180b180b000980b18091baa330053758602a00201e60226ea800d22225980098070014566002602a6ea801a00316405915980098068014566002602a6ea801a00316405916404c809860206ea80162b30013370e900200244c8c8cc88cc008008dd6180b980c180c180c180c180c180c180c180c002112cc00400629422b30013371e6eb8c05c00400e294626600400460300028091015180a98091baa007375c6028602a602a602a602a602a602a60226ea8cc010dd6180a00080718081baa0028b201c4038300e300f001300e006452689b2b200401",
        &[oracle_nft.as_str()],
        BuilderDataType::JSON,
    )
    .unwrap();
    blueprint
}

pub fn vault_withdraw_blueprint() -> WithdrawalBlueprint {
    let AppConfig { network_id, .. } = AppConfig::new();
    let oracle_nft = vault_oracle_mint_blueprint().hash;

    let mut blueprint = WithdrawalBlueprint::new(LanguageVersion::V3, network_id.parse().unwrap());
    blueprint
    .param_script(
        "5904be010100229800aba2aba1aba0aab9faab9eaab9dab9a9bae0024888888896600330013004375401322323300100100322330030013002002918041804800cdc3a4001370e90014dd2a400091111119194c004c02cdd5000c88c9660026010601c6ea8006264b30013009300f3754003132323232323232323232323298009bae301f0019bae301f00c9bae301f00b9bad301f0099bad301f0089bad301f0079bae301f0069bad301f0059bae301f0049bae301f0039bae301f0024888888888896600260560191330223758605402a44b3001002880d44c8c008c0b800cdd7181600120548b2050180f800980f000980e800980e000980d800980d000980c800980c000980b800980b000980a80098081baa0018b201c3232598009805000c5a2b300130090018b44c050c044dd5001201e403c601e6ea8004c048c04cc04cc03cdd5180498079baa3012300f3754003164034646600200200644b30010018a6103d87a80008992cc004c024c966002601460226ea80062900044dd6980a98091baa001404064b3001300a3011375400314c103d87a8000899198008009bab30163013375400444b30010018a6103d87a8000899192cc004cdc8a45000018acc004cdc7a44100001898069980c180b00125eb82298103d87a80004051133004004301a00340506eb8c050004c05c005015202032330010013756601860246ea8c030c048dd5001112cc004006298103d87a8000899192cc004cdc8804000c56600266e3c020006260186602e602a00497ae08a60103d87a8000404d1330040043019003404c6eb8c04c004c05800501444c020cc04c0052f5c11330030033015002403c6026002808a601e011300f002488896600260100091329800980a000cc050c05400660206ea800a2646644b3001300d3013375400b13232598009807980a9baa00189919912cc004c0480062b3001301937540070028b20348acc004c04400626464646644b3001302200389980c9bac3021005225980080144cc06c010896600200500b899180118138019bae3025002408d13230023025003375a6046004810a2c80f8dd6180f8009bae301f002301f001301e0013019375400716405c80b8566002601e602c6ea800629462941015180b1baa00130193016375400316405064660020026eacc064c068c068c068010896600200314c0103d87a80008992cc004cdd7802180b800c4c03ccc068c0600052f5c1133003003301c0024058603400280c0c02ccc058c05cc060c060c060c060c060c060c060c060c0600052f5c113232330010013756603200844b30010018a508acc004cdd7801980b180d000c528c4cc008008c06c00501520303374a90011980b180b800a5eb81012180b180b180b180b180b180b000980b18091baa330053758602a00201e60226ea800d22225980098070014566002602a6ea801a00316405915980098068014566002602a6ea801a00316405916404c809860206ea80162b30013370e900200244c8c8cc88cc008008dd6180b980c180c180c180c180c180c180c180c002112cc00400629422b30013371e6eb8c05c00400e294626600400460300028091015180a98091baa007375c6028602a602a602a602a602a602a60226ea8cc010dd6180a00080718081baa0028b201c4038300e300f001300e006452689b2b200401",
        &[oracle_nft.as_str()],
        BuilderDataType::JSON,
    )
    .unwrap();
    blueprint
}

#[cfg(test)]
mod tests {

    use super::*;
    use dotenv::dotenv;

    #[test]
    fn test_vault_spend_blueprint() {
        dotenv().ok();

        let blueprint = vault_spend_blueprint();
        assert_eq!(blueprint.hash, "TODO");
        assert_eq!(blueprint.cbor, "TODO");
    }

    #[test]
    fn test_vault_withdraw_blueprint() {
        dotenv().ok();

        let blueprint = vault_withdraw_blueprint();
        assert_eq!(blueprint.hash, "TODO");
        assert_eq!(blueprint.cbor, "TODO");
    }
}
